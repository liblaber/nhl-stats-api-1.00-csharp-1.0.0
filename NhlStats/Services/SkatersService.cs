// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using NhlStats.Http;
using NhlStats.Http.Serialization;

namespace NhlStats.Services;

public class SkatersService : BaseService
{
    internal SkatersService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Retrieve skater leaders for a specific attribute.</summary>
    /// <param name="attribute">Skater attribute</param>
    /// <param name="lang">Language code</param>
    public async Task<object> GetSkaterLeadersAsync(
        string attribute,
        string lang,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(attribute, nameof(attribute));
        ArgumentNullException.ThrowIfNull(lang, nameof(lang));

        var request = new RequestBuilder(HttpMethod.Get, "{lang}/leaders/skaters/{attribute}")
            .SetPathParameter("attribute", attribute)
            .SetPathParameter("lang", lang)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Retrieve skater milestones.</summary>
    /// <param name="lang">Language code</param>
    public async Task<object> GetSkaterMilestonesAsync(
        string lang,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(lang, nameof(lang));

        var request = new RequestBuilder(HttpMethod.Get, "{lang}/milestones/skaters")
            .SetPathParameter("lang", lang)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Retrieve skater information.</summary>
    /// <param name="lang">Language code</param>
    public async Task<object> GetSkaterInformationAsync(
        string lang,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(lang, nameof(lang));

        var request = new RequestBuilder(HttpMethod.Get, "{lang}/skater")
            .SetPathParameter("lang", lang)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Retrieve skater stats for a specific report.</summary>
    /// <param name="report">Skater report</param>
    /// <param name="lang">Language code</param>
    /// <param name="cayenneExp">Required</param>
    /// <param name="isAggregate">Optional</param>
    /// <param name="isGame">Optional</param>
    /// <param name="factCayenneExp">Optional</param>
    /// <param name="include">Optional</param>
    /// <param name="exclude">Optional</param>
    /// <param name="sort">Optional</param>
    /// <param name="dir">Optional</param>
    /// <param name="start">Optional</param>
    /// <param name="limit">Optional (Note: a limit of -1 will return all results)</param>
    public async Task<object> GetSkaterStatsAsync(
        string report,
        string lang,
        string cayenneExp,
        bool? isAggregate = null,
        bool? isGame = null,
        string? factCayenneExp = null,
        string? include = null,
        string? exclude = null,
        string? sort = null,
        string? dir = null,
        long? start = null,
        long? limit = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(report, nameof(report));
        ArgumentNullException.ThrowIfNull(lang, nameof(lang));
        ArgumentNullException.ThrowIfNull(cayenneExp, nameof(cayenneExp));

        var request = new RequestBuilder(HttpMethod.Get, "{lang}/skater/{report}")
            .SetPathParameter("report", report)
            .SetPathParameter("lang", lang)
            .SetQueryParameter("cayenneExp", cayenneExp)
            .SetOptionalQueryParameter("isAggregate", isAggregate)
            .SetOptionalQueryParameter("isGame", isGame)
            .SetOptionalQueryParameter("factCayenneExp", factCayenneExp)
            .SetOptionalQueryParameter("include", include)
            .SetOptionalQueryParameter("exclude", exclude)
            .SetOptionalQueryParameter("sort", sort)
            .SetOptionalQueryParameter("dir", dir)
            .SetOptionalQueryParameter("start", start)
            .SetOptionalQueryParameter("limit", limit)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
